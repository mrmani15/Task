{"version":3,"sources":["components/ShowGraph.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ShowGraph","props","data","options","Home","componentDidMount","ws","WebSocket","onopen","send","JSON","stringify","type","product_ids","channels","name","onmessage","event","response","parse","console","log","oldBtcDataSet","state","lineChartData","datasets","newBtcDataSet","push","price","setState","newChartData","labels","concat","Date","toLocaleTimeString","label","backgroundColor","borderColor","theme","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","classes","this","className","Component","withStyles","height","width","margin","withTheme","App","Boolean","window","location","hostname","match","createMuiTheme","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0MAKeA,EAFG,SAAAC,GAAK,OAAI,kBAAC,IAAD,CAAMC,KAAMD,EAAMC,KAAMC,QAASF,EAAME,W,SCS5DC,E,kDACL,WAAYH,GAAQ,IAAD,8BAClB,cAAMA,IA0CPI,kBAAoB,WACnB,IAAIC,EAAK,IAAIC,UAAU,kCACvBD,EAAGE,OAAS,WACXF,EAAGG,KACFC,KAAKC,UAAU,CACdC,KAAM,YACNC,YAAa,CAAC,WACdC,SAAU,CACT,SACA,YACA,CAAEC,KAAM,SAAUF,YAAa,CAAC,iBAKpCP,EAAGU,UAAY,SAAAC,GACd,IAAIC,EAAWR,KAAKS,MAAMF,EAAMf,MAChC,GAAsB,WAAlBgB,EAASN,KAAmB,CAC/BQ,QAAQC,IAAIH,GAEZ,IAAMI,EAAgB,EAAKC,MAAMC,cAAcC,SAAS,GAClDC,EAAa,eAAQJ,GAC3BI,EAAcxB,KAAKyB,KAAKT,EAASU,OACjC,EAAKC,SAAS,CACbD,MAAOV,EAASU,QAGjB,IAAME,EAAY,2BACd,EAAKP,MAAMC,eADG,IAEjBC,SAAU,CAACC,GACXK,OAAQ,EAAKR,MAAMC,cAAcO,OAAOC,QACvC,IAAIC,MAAOC,wBAGb,EAAKL,SAAS,CAAEL,cAAeM,OA1EjC,EAAKP,MAAQ,CACZK,MAAO,EACPJ,cAAe,CACdO,OAAQ,GACRN,SAAU,CACT,CACCb,KAAM,OACNuB,MAAO,UACPC,gBAAiB,mBACjBC,YAAa,EAAKpC,MAAMqC,MAAMC,QAAQC,QAAQC,KAC9CC,qBAAsB,EAAKzC,MAAMqC,MAAMC,QAAQI,UAC7CF,KACFG,iBAAkB,EAAK3C,MAAMqC,MAAMC,QAAQI,UACzCF,KACFI,YAAa,IACbC,YAAa,IACb5C,KAAM,MAIT6C,iBAAkB,CACjBC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACTC,SAAS,GAEVC,OAAQ,CACPC,MAAO,CACN,CACCC,MAAO,CACNC,UAAU,EACVC,cAAe,SAlCH,E,qDAkFT,IACDC,EAAYC,KAAKzD,MAAjBwD,QACR,OAAyB,IAArBC,KAAKnC,MAAMK,MAEb,yBAAK+B,UAAWF,EAAQ,oBACvB,kDAAwBC,KAAKnC,MAAMK,OACnC,kBAAC,EAAD,CACC1B,KAAMwD,KAAKnC,MAAMC,cACjBrB,QAASuD,KAAKnC,MAAMwB,oBAKhB,iD,GAhGSa,aAoGJC,eA5GA,SAAAvB,GAAK,MAAK,CACxB,kBAAmB,CAClBwB,OAAQ,IACRC,MAAO,MACPC,OAAQ,WAwGwB,CAAEC,WAAW,GAAhCJ,CAAwCzD,GCpGxC8D,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCXAjC,EAAQkC,cAEdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAkBrC,MAAOA,GACvB,kBAAC,EAAD,QAGJsC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,a","file":"static/js/main.491154b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst ShowGraph = props => <Line data={props.data} options={props.options} />;\n\nexport default ShowGraph;\n","import React, { Component } from 'react';\nimport ShowGraph from './ShowGraph';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n\t'chart-container': {\n\t\theight: 500,\n\t\twidth: '90%',\n\t\tmargin: 'auto',\n\t},\n});\n\nclass Home extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tprice: 0,\n\t\t\tlineChartData: {\n\t\t\t\tlabels: [],\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'line',\n\t\t\t\t\t\tlabel: 'BTC-USD',\n\t\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0)',\n\t\t\t\t\t\tborderColor: this.props.theme.palette.primary.main,\n\t\t\t\t\t\tpointBackgroundColor: this.props.theme.palette.secondary\n\t\t\t\t\t\t\t.main,\n\t\t\t\t\t\tpointBorderColor: this.props.theme.palette.secondary\n\t\t\t\t\t\t\t.main,\n\t\t\t\t\t\tborderWidth: '2',\n\t\t\t\t\t\tlineTension: 0.45,\n\t\t\t\t\t\tdata: [],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\tlineChartOptions: {\n\t\t\t\tresponsive: true,\n\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\ttooltips: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tautoSkip: true,\n\t\t\t\t\t\t\t\tmaxTicksLimit: 10,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\tcomponentDidMount = () => {\n\t\tlet ws = new WebSocket('wss://ws-feed.pro.coinbase.com');\n\t\tws.onopen = () => {\n\t\t\tws.send(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\ttype: 'subscribe',\n\t\t\t\t\tproduct_ids: ['BTC-USD'],\n\t\t\t\t\tchannels: [\n\t\t\t\t\t\t'level2',\n\t\t\t\t\t\t'heartbeat',\n\t\t\t\t\t\t{ name: 'ticker', product_ids: ['BTC-USD'] },\n\t\t\t\t\t],\n\t\t\t\t})\n\t\t\t);\n\t\t};\n\t\tws.onmessage = event => {\n\t\t\tvar response = JSON.parse(event.data);\n\t\t\tif (response.type === 'ticker') {\n\t\t\t\tconsole.log(response);\n\n\t\t\t\tconst oldBtcDataSet = this.state.lineChartData.datasets[0];\n\t\t\t\tconst newBtcDataSet = { ...oldBtcDataSet };\n\t\t\t\tnewBtcDataSet.data.push(response.price);\n\t\t\t\tthis.setState({\n\t\t\t\t\tprice: response.price,\n\t\t\t\t});\n\n\t\t\t\tconst newChartData = {\n\t\t\t\t\t...this.state.lineChartData,\n\t\t\t\t\tdatasets: [newBtcDataSet],\n\t\t\t\t\tlabels: this.state.lineChartData.labels.concat(\n\t\t\t\t\t\tnew Date().toLocaleTimeString()\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t\tthis.setState({ lineChartData: newChartData });\n\t\t\t}\n\t\t};\n\t};\n\n\trender() {\n\t\tconst { classes } = this.props;\n\t\tif (this.state.price !== 0) {\n\t\t\treturn (\n\t\t\t\t<div className={classes['chart-container']}>\n\t\t\t\t\t<h2>Current BTC_USD is {this.state.price}</h2>\n\t\t\t\t\t<ShowGraph\n\t\t\t\t\t\tdata={this.state.lineChartData}\n\t\t\t\t\t\toptions={this.state.lineChartOptions}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <h1>Wait.........</h1>;\n\t\t}\n\t}\n}\nexport default withStyles(styles, { withTheme: true })(Home);\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}