{"version":3,"sources":["components/Pagination.jsx","components/CustomerTable.jsx","components/RenderCustomerTable.jsx","pages/Home.jsx","components/PriceCountGraph.jsx","components/PriceCount.jsx","components/OrderCountGraph.jsx","components/OrderCount.jsx","components/Navbar.jsx","pages/Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["Pagination","postsPerPage","totalPosts","paginate","pageNumbers","max","Math","ceil","i","push","className","map","number","key","onClick","CustomerTable","currentPosts","scope","ele","id","firstName","lastName","email","created","orders","RenderCustomerTable","useState","data","customers","Data","currentPage","setCurrentPage","indexOfLastPost","indexOfFirstPost","slice","length","pageNumber","Home","PriceCountGraph","chartData","labels","dateArr","datasets","label","totalPrice","backgroundColor","style","width","height","options","title","display","text","fontSize","PriceCount","price","first","shift","split","reverse","unshift","join","sort","a","b","obj","sum","j","Number","mid","last","OrderCountGraph","date","countOnDate","OrderCount","count","arr","dateCount","sortedDate","forEach","Navbar","to","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6cf08d7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n\tconst pageNumbers = [];\n\tconst max = Math.ceil(totalPosts / postsPerPage);\n\tfor (let i = 1; i <= max; i++) {\n\t\tpageNumbers.push(i);\n\t}\n\n\treturn (\n\t\t<nav>\n\t\t\t<ul className=\"pagination\">\n\t\t\t\t{pageNumbers.map(number => (\n\t\t\t\t\t<li key={number} className=\"page-item\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => paginate(number)}\n\t\t\t\t\t\t\tclassName=\"page-link\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{number}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</nav>\n\t);\n};\n\nexport default Pagination;\n","import React from 'react';\n\nfunction CustomerTable({ currentPosts }) {\n\tif (currentPosts) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<table className=\"table table-striped table-secondary\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th scope=\"col\">ID</th>\n\t\t\t\t\t\t\t<th scope=\"col\">First Name</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Last Name</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Email</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Created</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Orders</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{currentPosts.map(ele => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={ele.id}>\n\t\t\t\t\t\t\t\t\t<td>{ele.id}</td>\n\t\t\t\t\t\t\t\t\t<td>{ele.firstName}</td>\n\t\t\t\t\t\t\t\t\t<td>{ele.lastName}</td>\n\t\t\t\t\t\t\t\t\t<td>{ele.email}</td>\n\t\t\t\t\t\t\t\t\t<td>{ele.created}</td>\n\t\t\t\t\t\t\t\t\t<td>{ele.orders}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <h1>Loading</h1>;\n\t}\n}\n\nexport default CustomerTable;\n","import React, { useState } from 'react';\nimport data from '../util/data.json';\nimport Pagination from './Pagination';\nimport CustomerTable from './CustomerTable';\n\nfunction RenderCustomerTable() {\n\tconst [Data] = useState([data.customers]);\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [postsPerPage] = useState(10);\n\n\tconst indexOfLastPost = currentPage * postsPerPage;\n\tconst indexOfFirstPost = indexOfLastPost - postsPerPage;\n\tconst currentPosts = Data[0].slice(indexOfFirstPost, indexOfLastPost);\n\n\tconst paginate = pageNumber => setCurrentPage(pageNumber);\n\n\treturn (\n\t\t<div className=\"container mt-3\">\n\t\t\t<CustomerTable currentPosts={currentPosts} />\n\t\t\t<Pagination\n\t\t\t\tpostsPerPage={postsPerPage}\n\t\t\t\ttotalPosts={Data[0].length}\n\t\t\t\tpaginate={paginate}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default RenderCustomerTable;\n","import React from 'react';\nimport RenderCustomerTable from '../components/RenderCustomerTable';\n\nfunction Home() {\n\treturn (\n\t\t<div>\n\t\t\t<RenderCustomerTable />\n\t\t</div>\n\t);\n}\n\nexport default Home;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nfunction PriceCountGraph({ dateArr, totalPrice }) {\n\tconst chartData = {\n\t\tlabels: dateArr,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: 'Price On Particular Date',\n\t\t\t\tdata: totalPrice,\n\t\t\t\tbackgroundColor: 'lightgreen',\n\t\t\t},\n\t\t],\n\t};\n\treturn (\n\t\t<div\n\t\t\tclassName=\"text-center barChart container\"\n\t\t\tstyle={{ width: '100%', height: '100%' }}\n\t\t>\n\t\t\t<Line\n\t\t\t\tdata={chartData}\n\t\t\t\toptions={{\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\ttext: 'Price At Date Graph',\n\t\t\t\t\t\tfontSize: 30,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default PriceCountGraph;\n","import React from 'react';\nimport data from '../util/data.json';\nimport PriceCountGraph from './PriceCountGraph';\n\nfunction PriceCount() {\n\t//extracting date and price\n\tlet price = [];\n\tdata.orders.map(ele => price.push([ele.created, ele.price]));\n\n\t// date extracting\n\tprice = price.map(ele => {\n\t\tlet first = ele.shift();\n\t\tfirst = first.split('T');\n\t\tfirst = first[0].split('-');\n\t\tfirst.reverse();\n\t\tele.unshift(first.join(''));\n\t\treturn ele;\n\t});\n\n\t//sorting in ascending order\n\tprice = price.sort((a, b) => a[0] - b[0]);\n\n\t// counting frequency\n\tlet obj = {};\n\n\tfor (let i = 0; i < price.length; i++) {\n\t\tif (obj[price[i][0]]) {\n\t\t\tobj[price[i][0]]++;\n\t\t} else {\n\t\t\tobj[price[i][0]] = 1;\n\t\t}\n\t}\n\t//unique dates\n\tlet dateArr = [];\n\tfor (let key in obj) {\n\t\tdateArr.push(key);\n\t}\n\n\t//calculating total price per day\n\tdateArr = dateArr.sort((a, b) => a - b);\n\tlet totalPrice = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < dateArr.length; i++) {\n\t\tfor (let j = 0; j < price.length; j++) {\n\t\t\tif (dateArr[i] === price[j][0]) {\n\t\t\t\tsum = sum + Number(price[j][1]);\n\t\t\t} else {\n\t\t\t\tif (sum) {\n\t\t\t\t\ttotalPrice.push(sum);\n\t\t\t\t}\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t}\n\tif (sum) {\n\t\ttotalPrice.push(sum);\n\t}\n\n\t// date formatting\n\tdateArr = dateArr.map(ele => {\n\t\tlet first = ele.split('');\n\t\tlet mid = first.slice(2, 4);\n\t\tmid = mid.join('');\n\t\tlet last = first.slice(4);\n\t\tlast = last.join('');\n\t\tfirst = first.slice(0, 2);\n\t\tfirst.push('-');\n\t\tfirst.push(mid);\n\t\tfirst.push('-');\n\t\tfirst.push(last);\n\t\treturn first.join('');\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<PriceCountGraph dateArr={dateArr} totalPrice={totalPrice} />\n\t\t</div>\n\t);\n}\n\nexport default PriceCount;\n","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nfunction OrderCountGraph({ date, countOnDate }) {\n\tconst chartData = {\n\t\tlabels: date,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: 'Order On Particular Date',\n\t\t\t\tdata: countOnDate,\n\t\t\t\tbackgroundColor: 'lightgreen',\n\t\t\t},\n\t\t],\n\t};\n\treturn (\n\t\t<div\n\t\t\tclassName=\"text-center barChart container\"\n\t\t\tstyle={{ width: '100%', height: '100%' }}\n\t\t>\n\t\t\t<Bar\n\t\t\t\tdata={chartData}\n\t\t\t\toptions={{\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\ttext: 'Order At Date Graph',\n\t\t\t\t\t\tfontSize: 30,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default OrderCountGraph;\n","import React from 'react';\nimport data from '../util/data.json';\nimport OrdersCountGraph from './OrderCountGraph';\n\nfunction OrderCount() {\n\t//extracting dates\n\n\tlet count = [];\n\tdata.orders.map(ele => count.push(ele.created));\n\tlet arr = count.map(ele => {\n\t\tlet time = ele.split('T');\n\t\treturn time[0];\n\t});\n\n\t// counting frequency\n\tlet dateCount = {};\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (dateCount[arr[i]]) {\n\t\t\tdateCount[arr[i]]++;\n\t\t} else {\n\t\t\tdateCount[arr[i]] = 1;\n\t\t}\n\t}\n\n\t//extracting unique date and their respective orders at particular day\n\n\tlet sortedDate = [];\n\tfor (let key in dateCount) {\n\t\tlet date = key.split('-').join('');\n\t\tsortedDate.push([date, dateCount[key]]);\n\t}\n\n\tsortedDate = sortedDate.sort((a, b) => a[0] - b[0]);\n\n\t//formatting date and order count\n\tlet date = [];\n\tlet countOnDate = [];\n\tsortedDate.forEach(ele => {\n\t\tlet first = ele[0].split('');\n\t\tfirst = first.slice(6);\n\t\tfirst.push('-04');\n\t\tfirst.push('-2020');\n\t\tfirst = first.join('');\n\t\tdate.push(first);\n\t\tcountOnDate.push(ele[1]);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<OrdersCountGraph date={date} countOnDate={countOnDate} />\n\t\t</div>\n\t);\n}\n\nexport default OrderCount;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar() {\n\treturn (\n\t\t<>\n\t\t\t<ul className=\"nav justify-content-center container bg-light mt-2\">\n\t\t\t\t<li className=\"nav-item m-auto\">\n\t\t\t\t\t<Link to=\"/\" className=\"nav-link\">\n\t\t\t\t\t\tCUSTOMER TABLE\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"nav-item m-auto\">\n\t\t\t\t\t<Link to=\"/price-graph\" className=\"nav-link\">\n\t\t\t\t\t\tPRICE GRAPH\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"nav-item m-auto\">\n\t\t\t\t\t<Link to=\"/order-graph\" className=\"nav-link\">\n\t\t\t\t\t\tORDER GRAPH\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</>\n\t);\n}\n\nexport default Navbar;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport PriceCount from '../components/PriceCount';\nimport OrderCount from '../components/OrderCount';\nimport Navbar from '../components/Navbar';\n\nfunction Routes() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Navbar />\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact component={Home} />\n\t\t\t\t<Route path=\"/price-graph\" component={PriceCount} />\n\t\t\t\t<Route path=\"/order-graph\" component={OrderCount} />\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport Routes from './pages/Routes';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}